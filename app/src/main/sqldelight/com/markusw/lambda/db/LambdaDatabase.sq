-- user_entity Table
CREATE TABLE user_entity (
    id TEXT PRIMARY KEY NOT NULL,
    displayName TEXT NOT NULL,
    photoUrl TEXT NOT NULL,
    email TEXT NOT NULL
);

getUsers:
SELECT * FROM user_entity;

getUserById:
SELECT * FROM user_entity WHERE id = ?;

insertUser:
INSERT INTO user_entity (id, displayName, photoUrl, email)
VALUES (?, ?, ?, ?);

deleteAllUsers:
DELETE FROM user_entity;

-- mentoring_entity Table
CREATE TABLE mentoring_entity (
    roomId TEXT PRIMARY KEY NOT NULL,
    title TEXT NOT NULL,
    price INTEGER NOT NULL,
    requesterId TEXT NOT NULL,
    authorId TEXT,
    coverUrl TEXT NOT NULL,
    description TEXT NOT NULL,
    requesterDescription TEXT NOT NULL,
    FOREIGN KEY (requesterId) REFERENCES user_entity(id),
    FOREIGN KEY (authorId) REFERENCES user_entity(id)
);

insertMentoring:
INSERT INTO mentoring_entity (roomId, title, price, requesterId, authorId, requesterDescription, description, coverUrl)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

getAllTutorialsWithDetails:
SELECT
    m.roomId,
    m.title,
    m.price,
    m.requesterId,
    m.authorId,
    m.coverUrl,
    m.description,
    m.requesterDescription,
    (IFNULL(SUM(d.amount), 0) + (COUNT(DISTINCT mp.userId) * m.price)) AS totalRevenue
FROM mentoring_entity m
LEFT JOIN donation_entity d ON m.roomId = d.mentoringId
LEFT JOIN mentoring_payment_entity mp ON m.roomId = mp.mentoringId
GROUP BY m.roomId;

getMentoringWithDetailsById:
SELECT
    m.roomId,
    m.title,
    m.price,
    m.requesterId,
    m.authorId,
    m.coverUrl,
    m.description,
    m.requesterDescription,
    (IFNULL(SUM(d.amount), 0) + (COUNT(DISTINCT mp.userId) * m.price)) AS totalRevenue
FROM mentoring_entity m
LEFT JOIN donation_entity d ON m.roomId = d.mentoringId
LEFT JOIN mentoring_payment_entity mp ON m.roomId = mp.mentoringId
WHERE m.roomId = ?
GROUP BY m.roomId;

getParticipantsByMentoringId:
SELECT
    u.id,
    u.displayName,
    u.photoUrl,
    u.email
FROM attends_entity a
JOIN user_entity u ON a.userId = u.id
WHERE a.mentoringId = ?;

deleteAllMentoring:
DELETE FROM mentoring_entity;

-- donation_entity Table
CREATE TABLE donation_entity (
    userId TEXT NOT NULL,
    mentoringId TEXT NOT NULL,
    amount INTEGER NOT NULL,
    PRIMARY KEY (userId, mentoringId),
    FOREIGN KEY (userId) REFERENCES user_entity(id),
    FOREIGN KEY (mentoringId) REFERENCES mentoring_entity(roomId)
);

insertDonation:
INSERT INTO donation_entity (userId, mentoringId, amount)
VALUES(?, ?, ?);

getAllDonationsDto:
SELECT * FROM donation_entity;

deleteAllDonations:
DELETE FROM donation_entity;

-- attends_entity Table
CREATE TABLE attends_entity (
    userId TEXT NOT NULL,
    mentoringId TEXT NOT NULL,
    PRIMARY KEY (userId, mentoringId),
    FOREIGN KEY (userId) REFERENCES user_entity(id),
    FOREIGN KEY (mentoringId) REFERENCES mentoring_entity(roomId)
);

insertAttendance:
INSERT INTO attends_entity (userId, mentoringId)
VALUES (?, ?);

deleteAllAttendance:
DELETE FROM attends_entity;

getAllAttendance:
SELECT * FROM attends_entity;

checkUserAttendance:
SELECT EXISTS(
    SELECT 1
    FROM attends_entity
    WHERE userId = ? AND mentoringId = ?
);

-- mentoring_payment entity
CREATE TABLE mentoring_payment_entity (
    userId TEXT NOT NULL,
    mentoringId TEXT NOT NULL,
    FOREIGN KEY (userId) REFERENCES user_entity(id),
    FOREIGN KEY (mentoringId) REFERENCES mentoring_entity(roomId)
);

insertMentoringPayment:
INSERT INTO mentoring_payment_entity (userId, mentoringId)
VALUES (?, ?);

getAllMentoringPaymentsEntity:
SELECT * FROM mentoring_payment_entity;

deleteAllMentoringPayments:
DELETE FROM mentoring_payment_entity;

checkMentoringPayment:
SELECT EXISTS(
    SELECT 1
    FROM mentoring_payment_entity
    WHERE userId = ? AND mentoringId = ?
);